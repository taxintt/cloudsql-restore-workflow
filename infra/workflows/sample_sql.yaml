
# https://cloud.google.com/workflows/docs/samples/workflows-connector-sqladmin?hl=ja
main:
  steps:
    - init:
        assign:
          - project: ${project}
          - instance: ${instance}
          - random_id: $${string(int(sys.now()))}

    # 1. setup database from backup
    - create_instance:
        call: googleapis.sqladmin.v1beta4.instances.insert
        args:
          project: $${project}
          body:
            kind: "sql#database"
            settings:
              tier: ${tier}
            project: $${project}
            backendType: "SECOND_GEN"
            name: $${instance + "-" + random_id}
            rootPassword: thisisroot
    # https://cloud.google.com/workflows/docs/reference/googleapis/sqladmin/v1beta4/instances/restoreBackup?hl=ja
    - restore_data_from_backup:
        call: googleapis.sqladmin.v1beta4.instances.restoreBackup
        args:
          project: $${project}
          instance: $${instance + "-" + random_id}
          body:
            restoreBackupContext:
                kind: sql#restoreBackupContext
                project: $${project}
                instanceId: $${instance + "-for-backup"}
                backupRunId: 1654919319590
    # https://cloud.google.com/workflows/docs/reference/googleapis/sqladmin/v1/instances/insert?hl=ja
    # - create_database:
    #     call: googleapis.sqladmin.v1beta4.databases.insert
    #     args:
    #       project: $${project}
    #       instance: $${instance + "-" + random_id}
    #       body:
    #         kind: "sql#database"
    #         charset: "utf8"
    #         collation: "utf8_general_ci"
    #         name: ${database_name}
    #         instance: $${instance + "-" + random_id}
    #         project: $${project}
    #         sqlserverDatabaseDetails:
    #           compatibilityLevel: 5
    #           recoveryModel: "Simple"
    # - get_database:
    #     call: googleapis.sqladmin.v1beta4.databases.get
    #     args:
    #       project: $${project}
    #       instance: $${instance + "-" + random_id}
    #       database: ${database_name}
    
    # polling db status → not needed
    # https://cloud.google.com/workflows/docs/sleeping?hl=ja
    # - check_job:
    #     call: googleapis.sqladmin.v1beta4.instances.get
    #     args:
    #       project: $${project}
    #       instance: $${instance + "-" + random_id}
    #     result: response
    # - check_if_runnable:
    #     switch:
    #       - condition: $${response.state == "RUNNABLE"}
    #         next: exec_query_to_cloud_sql
    # - wait:
    #     call: sys.sleep
    #     args:
    #       seconds: 60 # 60sec * 1min
    #     next: check_job

    # 2. execute sql statement
    - exec_query_to_cloud_sql:
        call: exec_query
        args:
          project: $${project}
          region: ${region}
          instance: $${instance + "-" + random_id}
          function_name: ${function_name}
        result: query_result
    
    # 3. backup sql instance
    - create_backup:
        call: googleapis.sqladmin.v1beta4.backupRuns.insert
        args:
          project: $${project}
          instance: $${instance + "-" + random_id}
          body:
            kind: backupRun
            instance: $${instance + "-" + random_id}
            type: ON_DEMAND
    - delete_database:
        call: googleapis.sqladmin.v1beta4.databases.delete
        args:
          project: $${project}
          instance: $${instance + "-" + random_id}
          database: ${database_name}
    - delete_instance:
        call: googleapis.sqladmin.v1beta4.instances.delete
        args:
          project: $${project}
          instance: $${instance + "-" + random_id}
    - return_success_status:
        return: "SUCCESS"

exec_query:
  params: [project, region, instance, function_name]
  steps:
    - call_function:
        call: http.post
        args:
          # https://cloud.google.com/workflows/docs/create-workflow-terraform
          # 変数展開に関しては注意
          url: $${"https://" + region + "-" + project + ".cloudfunctions.net/" + function_name}
          body: 
            project: $${project}
            region: $${region}
            instance: $${instance}
          # https://dev.classmethod.jp/articles/google-workflows-send-email/
          auth:
            type: OIDC
        result: resp
    - return_value:
        return: $${resp}